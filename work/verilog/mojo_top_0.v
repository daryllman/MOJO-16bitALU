/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module mojo_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    output reg spi_miso,
    output reg [3:0] spi_channel,
    output reg avr_rx,
    output reg [23:0] io_led,
    output reg [7:0] io_seg,
    output reg [3:0] io_sel,
    input [4:0] io_button,
    input [23:0] io_dip
  );
  
  
  
  reg rst;
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_1 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  reg [15:0] M_store_a_d, M_store_a_q = 1'h0;
  reg [15:0] M_store_b_d, M_store_b_q = 1'h0;
  reg [5:0] M_store_alufn_d, M_store_alufn_q = 1'h0;
  reg [15:0] M_store_temp_d, M_store_temp_q = 1'h0;
  reg M_store_z_d, M_store_z_q = 1'h0;
  reg M_store_v_d, M_store_v_q = 1'h0;
  reg M_store_n_d, M_store_n_q = 1'h0;
  reg [15:0] M_store_correct_d, M_store_correct_q = 1'h0;
  reg [7:0] M_store_status_d, M_store_status_q = 1'h0;
  reg [28:0] M_counter_d, M_counter_q = 1'h0;
  reg [3:0] M_case_state_d, M_case_state_q = 1'h0;
  localparam INITIAL_state = 5'd0;
  localparam MANUAL_state = 5'd1;
  localparam TESTADD1_state = 5'd2;
  localparam TESTADD2_state = 5'd3;
  localparam TESTSUB_state = 5'd4;
  localparam TESTMUL_state = 5'd5;
  localparam TESTAND_state = 5'd6;
  localparam TESTOR_state = 5'd7;
  localparam TESTXOR_state = 5'd8;
  localparam TESTA_state = 5'd9;
  localparam TESTSHL_state = 5'd10;
  localparam TESTSHR_state = 5'd11;
  localparam TESTSRA_state = 5'd12;
  localparam TESTCMPEQ_state = 5'd13;
  localparam TESTCMPLT_state = 5'd14;
  localparam TESTCMPLE_state = 5'd15;
  localparam TESTCMPLE2_state = 5'd16;
  
  reg [4:0] M_state_d, M_state_q = INITIAL_state;
  wire [7-1:0] M_seg_seg;
  wire [4-1:0] M_seg_sel;
  reg [32-1:0] M_seg_values;
  multi_seven_seg_2 seg (
    .clk(clk),
    .rst(rst),
    .values(M_seg_values),
    .seg(M_seg_seg),
    .sel(M_seg_sel)
  );
  
  reg [15:0] a;
  
  reg [15:0] b;
  
  reg [5:0] alufn;
  
  reg [15:0] alu;
  
  wire [16-1:0] M_alumod_result;
  wire [1-1:0] M_alumod_z;
  wire [1-1:0] M_alumod_v;
  wire [1-1:0] M_alumod_n;
  reg [16-1:0] M_alumod_a;
  reg [16-1:0] M_alumod_b;
  reg [6-1:0] M_alumod_alufn;
  alu_3 alumod (
    .a(M_alumod_a),
    .b(M_alumod_b),
    .alufn(M_alumod_alufn),
    .result(M_alumod_result),
    .z(M_alumod_z),
    .v(M_alumod_v),
    .n(M_alumod_n)
  );
  
  localparam TIMER = 5'h10;
  
  always @* begin
    M_state_d = M_state_q;
    M_case_state_d = M_case_state_q;
    M_store_temp_d = M_store_temp_q;
    M_store_status_d = M_store_status_q;
    M_store_z_d = M_store_z_q;
    M_store_v_d = M_store_v_q;
    M_counter_d = M_counter_q;
    M_store_alufn_d = M_store_alufn_q;
    M_store_b_d = M_store_b_q;
    M_store_a_d = M_store_a_q;
    M_store_correct_d = M_store_correct_q;
    M_store_n_d = M_store_n_q;
    
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    led = 8'h00;
    spi_miso = 1'bz;
    spi_channel = 4'bzzzz;
    avr_rx = 1'bz;
    io_led = 24'h000000;
    io_seg = 8'hff;
    io_sel = 4'hf;
    M_seg_values = 32'h11111111;
    io_sel = 8'hff;
    a = 8'h00;
    b = 8'h00;
    io_seg = ~M_seg_seg;
    io_sel = ~M_seg_sel;
    alufn = io_dip[16+5-:6];
    M_alumod_alufn = alufn;
    M_alumod_a = a;
    M_alumod_b = b;
    alu = M_alumod_result;
    io_led[0+15-:16] = a;
    
    case (M_state_q)
      INITIAL_state: begin
        M_seg_values = 32'h11111111;
        if (io_button[4+0-:1] == 1'h1) begin
          M_state_d = TESTADD1_state;
        end
        if (io_dip[23+0-:1]) begin
          M_seg_values = 32'h11000000;
          M_state_d = MANUAL_state;
        end
      end
      MANUAL_state: begin
        io_led[23+0-:1] = 1'h1;
        if (io_button[0+0-:1]) begin
          a[0+15-:16] = io_dip[0+15-:16];
          M_store_a_d = a;
          M_store_temp_d = a;
        end
        if (io_button[1+0-:1]) begin
          b[0+15-:16] = io_dip[0+15-:16];
          M_store_b_d = b;
          M_store_temp_d = b;
        end
        if (io_button[2+0-:1]) begin
          alufn = io_dip[16+5-:6];
          M_store_alufn_d = alufn;
          M_alumod_alufn = M_store_alufn_q;
          M_alumod_a = M_store_a_q;
          M_alumod_b = M_store_b_q;
          M_alumod_alufn = M_store_alufn_q;
          alu = M_alumod_result;
          M_store_z_d = M_alumod_z;
          M_store_v_d = M_alumod_v;
          M_store_n_d = M_alumod_n;
          M_store_temp_d = alu[0+15-:16];
        end
        if (io_button[3+0-:1]) begin
          M_store_a_d = 16'h0000;
          M_store_b_d = 16'h0000;
          M_store_alufn_d = 6'h00;
          M_store_temp_d = 16'h0000;
          M_store_z_d = 1'h0;
          M_store_v_d = 1'h0;
          M_store_n_d = 1'h0;
        end
        io_led[0+15-:16] = M_store_temp_q;
        if (M_store_z_q == 1'h1) begin
          M_seg_values[16+7-:8] = 4'h1;
        end else begin
          M_seg_values[16+7-:8] = 4'h0;
        end
        if (M_store_v_q == 1'h1) begin
          M_seg_values[8+7-:8] = 4'h1;
        end else begin
          M_seg_values[8+7-:8] = 4'h0;
        end
        if (M_store_n_q == 1'h1) begin
          M_seg_values[0+7-:8] = 4'h1;
        end else begin
          M_seg_values[0+7-:8] = 4'h0;
        end
        io_led[16+5-:6] = M_store_alufn_q;
        if (!io_dip[23+0-:1]) begin
          M_store_a_d = 16'h0000;
          M_store_b_d = 16'h0000;
          M_store_alufn_d = 6'h00;
          M_store_temp_d = 16'h0000;
          M_store_z_d = 1'h0;
          M_store_v_d = 1'h0;
          M_store_n_d = 1'h0;
          M_state_d = INITIAL_state;
        end
      end
      TESTADD1_state: begin
        M_store_alufn_d = 6'h00;
        M_store_a_d = 16'h000c;
        M_store_b_d = 16'h0002;
        M_store_correct_d = 16'h000e;
        M_alumod_alufn = M_store_alufn_q;
        M_alumod_a = M_store_a_q;
        M_alumod_b = M_store_b_q;
        alu = M_alumod_result;
        M_store_z_d = M_alumod_z;
        M_store_v_d = M_alumod_v;
        M_store_n_d = M_alumod_n;
        if (M_case_state_q == 1'h0) begin
          M_seg_values = 32'h01111111;
          M_store_status_d = {2'h0, M_store_alufn_q};
          M_store_temp_d = 16'h0000;
        end
        if (M_case_state_q == 1'h1) begin
          M_seg_values = 32'h1111110b;
          M_store_status_d = 6'h00;
          M_store_temp_d = M_store_a_q;
        end
        if (M_case_state_q == 2'h2) begin
          M_seg_values = 32'h11111108;
          M_store_temp_d = M_store_b_q;
        end
        if (M_case_state_q == 2'h3) begin
          M_store_status_d = {5'h00, M_store_z_q, M_store_v_q, M_store_n_q};
          M_store_temp_d = alu[0+15-:16];
          if (M_store_correct_q == alu[0+15-:16]) begin
            M_seg_values = 32'h0a0b0c0c;
          end else begin
            M_seg_values = 32'h0d0b0e0f;
          end
        end
        if (M_case_state_q == 3'h4) begin
          M_store_a_d = 16'h0000;
          M_store_b_d = 16'h0000;
          M_store_alufn_d = 6'h00;
          M_store_status_d = 8'h00;
          M_store_temp_d = 16'h0000;
          M_store_z_d = 1'h0;
          M_store_v_d = 1'h0;
          M_store_n_d = 1'h0;
          M_case_state_d = 1'h0;
          M_state_d = TESTADD2_state;
        end
        io_led[16+7-:8] = M_store_status_q;
        io_led[0+15-:16] = M_store_temp_q;
        if (io_dip[23+0-:1]) begin
          M_state_d = MANUAL_state;
        end
        M_counter_d = M_counter_q + 1'h1;
        if (io_button[3+0-:1] | M_counter_q[16+0-:1] == 1'h1) begin
          M_case_state_d = M_case_state_q + 1'h1;
          M_counter_d = 1'h0;
        end
      end
      TESTADD2_state: begin
        M_store_alufn_d = 6'h00;
        M_store_a_d = 16'h7fff;
        M_store_b_d = 16'h7fff;
        M_store_correct_d = 16'hfffe;
        M_alumod_alufn = M_store_alufn_q;
        M_alumod_a = M_store_a_q;
        M_alumod_b = M_store_b_q;
        alu = M_alumod_result;
        M_store_z_d = M_alumod_z;
        M_store_v_d = M_alumod_v;
        M_store_n_d = M_alumod_n;
        if (M_case_state_q == 1'h0) begin
          M_seg_values = 32'h02111111;
          M_store_status_d = {2'h0, M_store_alufn_q};
          M_store_temp_d = 16'h0000;
        end
        if (M_case_state_q == 1'h1) begin
          M_seg_values = 32'h1111110b;
          M_store_status_d = 6'h00;
          M_store_temp_d = M_store_a_q;
        end
        if (M_case_state_q == 2'h2) begin
          M_seg_values = 32'h11111108;
          M_store_temp_d = M_store_b_q;
        end
        if (M_case_state_q == 2'h3) begin
          M_store_status_d = {5'h00, M_store_z_q, M_store_v_q, M_store_n_q};
          M_store_temp_d = alu[0+15-:16];
          if (M_store_correct_q == alu[0+15-:16]) begin
            M_seg_values = 32'h0a0b0c0c;
          end else begin
            M_seg_values = 32'h0d0b0e0f;
          end
        end
        if (M_case_state_q == 3'h4) begin
          M_store_a_d = 16'h0000;
          M_store_b_d = 16'h0000;
          M_store_alufn_d = 6'h00;
          M_store_status_d = 8'h00;
          M_store_temp_d = 16'h0000;
          M_store_z_d = 1'h0;
          M_store_v_d = 1'h0;
          M_store_n_d = 1'h0;
          M_case_state_d = 1'h0;
          M_state_d = TESTSUB_state;
        end
        io_led[16+7-:8] = M_store_status_q;
        io_led[0+15-:16] = M_store_temp_q;
        if (io_dip[23+0-:1]) begin
          M_state_d = MANUAL_state;
        end
        M_counter_d = M_counter_q + 1'h1;
        if (io_button[3+0-:1] | M_counter_q[16+0-:1] == 1'h1) begin
          M_case_state_d = M_case_state_q + 1'h1;
          M_counter_d = 1'h0;
        end
      end
      TESTSUB_state: begin
        M_store_alufn_d = 6'h01;
        M_store_a_d = 16'h000c;
        M_store_b_d = 16'h0002;
        M_store_correct_d = 16'h000a;
        M_alumod_alufn = M_store_alufn_q;
        M_alumod_a = M_store_a_q;
        M_alumod_b = M_store_b_q;
        alu = M_alumod_result;
        M_store_z_d = M_alumod_z;
        M_store_v_d = M_alumod_v;
        M_store_n_d = M_alumod_n;
        if (M_case_state_q == 1'h0) begin
          M_seg_values = 32'h03111111;
          M_store_status_d = {2'h0, M_store_alufn_q};
          M_store_temp_d = 16'h0000;
        end
        if (M_case_state_q == 1'h1) begin
          M_seg_values = 32'h1111110b;
          M_store_status_d = 6'h00;
          M_store_temp_d = M_store_a_q;
        end
        if (M_case_state_q == 2'h2) begin
          M_seg_values = 32'h11111108;
          M_store_temp_d = M_store_b_q;
        end
        if (M_case_state_q == 2'h3) begin
          M_store_status_d = {5'h00, M_store_z_q, M_store_v_q, M_store_n_q};
          M_store_temp_d = alu[0+15-:16];
          if (M_store_correct_q == alu[0+15-:16]) begin
            M_seg_values = 32'h0a0b0c0c;
          end else begin
            M_seg_values = 32'h0d0b0e0f;
          end
        end
        if (M_case_state_q == 3'h4) begin
          M_store_a_d = 16'h0000;
          M_store_b_d = 16'h0000;
          M_store_alufn_d = 6'h00;
          M_store_status_d = 8'h00;
          M_store_temp_d = 16'h0000;
          M_store_z_d = 1'h0;
          M_store_v_d = 1'h0;
          M_store_n_d = 1'h0;
          M_case_state_d = 1'h0;
          M_state_d = TESTMUL_state;
        end
        io_led[16+7-:8] = M_store_status_q;
        io_led[0+15-:16] = M_store_temp_q;
        if (io_dip[23+0-:1]) begin
          M_state_d = MANUAL_state;
        end
        M_counter_d = M_counter_q + 1'h1;
        if (io_button[3+0-:1] | M_counter_q[16+0-:1] == 1'h1) begin
          M_case_state_d = M_case_state_q + 1'h1;
          M_counter_d = 1'h0;
        end
      end
      TESTMUL_state: begin
        M_store_alufn_d = 6'h02;
        M_store_a_d = 16'h000c;
        M_store_b_d = 16'h0002;
        M_store_correct_d = 16'h0018;
        M_alumod_alufn = M_store_alufn_q;
        M_alumod_a = M_store_a_q;
        M_alumod_b = M_store_b_q;
        alu = M_alumod_result;
        M_store_z_d = M_alumod_z;
        M_store_v_d = M_alumod_v;
        M_store_n_d = M_alumod_n;
        if (M_case_state_q == 1'h0) begin
          M_seg_values = 32'h04111111;
          M_store_status_d = {2'h0, M_store_alufn_q};
          M_store_temp_d = 16'h0000;
        end
        if (M_case_state_q == 1'h1) begin
          M_seg_values = 32'h1111110b;
          M_store_status_d = 6'h00;
          M_store_temp_d = M_store_a_q;
        end
        if (M_case_state_q == 2'h2) begin
          M_seg_values = 32'h11111108;
          M_store_temp_d = M_store_b_q;
        end
        if (M_case_state_q == 2'h3) begin
          M_store_status_d = {5'h00, M_store_z_q, M_store_v_q, M_store_n_q};
          M_store_temp_d = alu[0+15-:16];
          if (M_store_correct_q == alu[0+15-:16]) begin
            M_seg_values = 32'h0a0b0c0c;
          end else begin
            M_seg_values = 32'h0d0b0e0f;
          end
        end
        if (M_case_state_q == 3'h4) begin
          M_store_a_d = 16'h0000;
          M_store_b_d = 16'h0000;
          M_store_alufn_d = 6'h00;
          M_store_status_d = 8'h00;
          M_store_temp_d = 16'h0000;
          M_store_z_d = 1'h0;
          M_store_v_d = 1'h0;
          M_store_n_d = 1'h0;
          M_case_state_d = 1'h0;
          M_state_d = TESTAND_state;
        end
        io_led[16+7-:8] = M_store_status_q;
        io_led[0+15-:16] = M_store_temp_q;
        if (io_dip[23+0-:1]) begin
          M_state_d = MANUAL_state;
        end
        M_counter_d = M_counter_q + 1'h1;
        if (io_button[3+0-:1] | M_counter_q[16+0-:1] == 1'h1) begin
          M_case_state_d = M_case_state_q + 1'h1;
          M_counter_d = 1'h0;
        end
      end
      TESTAND_state: begin
        M_store_alufn_d = 6'h1a;
        M_store_a_d = 16'h000e;
        M_store_b_d = 16'h0002;
        M_store_correct_d = 16'h0002;
        M_alumod_alufn = M_store_alufn_q;
        M_alumod_a = M_store_a_q;
        M_alumod_b = M_store_b_q;
        alu = M_alumod_result;
        M_store_z_d = M_alumod_z;
        M_store_v_d = M_alumod_v;
        M_store_n_d = M_alumod_n;
        if (M_case_state_q == 1'h0) begin
          M_seg_values = 32'h05111111;
          M_store_status_d = {2'h0, M_store_alufn_q};
          M_store_temp_d = 16'h0000;
        end
        if (M_case_state_q == 1'h1) begin
          M_seg_values = 32'h1111110b;
          M_store_status_d = 6'h00;
          M_store_temp_d = M_store_a_q;
        end
        if (M_case_state_q == 2'h2) begin
          M_seg_values = 32'h11111108;
          M_store_temp_d = M_store_b_q;
        end
        if (M_case_state_q == 2'h3) begin
          M_store_status_d = {5'h00, M_store_z_q, M_store_v_q, M_store_n_q};
          M_store_temp_d = alu[0+15-:16];
          if (M_store_correct_q == alu[0+15-:16]) begin
            M_seg_values = 32'h0a0b0c0c;
          end else begin
            M_seg_values = 32'h0d0b0e0f;
          end
        end
        if (M_case_state_q == 3'h4) begin
          M_store_a_d = 16'h0000;
          M_store_b_d = 16'h0000;
          M_store_alufn_d = 6'h00;
          M_store_status_d = 8'h00;
          M_store_temp_d = 16'h0000;
          M_store_z_d = 1'h0;
          M_store_v_d = 1'h0;
          M_store_n_d = 1'h0;
          M_case_state_d = 1'h0;
          M_state_d = TESTOR_state;
        end
        io_led[16+7-:8] = M_store_status_q;
        io_led[0+15-:16] = M_store_temp_q;
        if (io_dip[23+0-:1]) begin
          M_state_d = MANUAL_state;
        end
        M_counter_d = M_counter_q + 1'h1;
        if (io_button[3+0-:1] | M_counter_q[16+0-:1] == 1'h1) begin
          M_case_state_d = M_case_state_q + 1'h1;
          M_counter_d = 1'h0;
        end
      end
      TESTOR_state: begin
        M_store_alufn_d = 6'h1e;
        M_store_a_d = 16'h6957;
        M_store_b_d = 16'hac08;
        M_store_correct_d = 16'hed5f;
        M_alumod_alufn = M_store_alufn_q;
        M_alumod_a = M_store_a_q;
        M_alumod_b = M_store_b_q;
        alu = M_alumod_result;
        M_store_z_d = M_alumod_z;
        M_store_v_d = M_alumod_v;
        M_store_n_d = M_alumod_n;
        if (M_case_state_q == 1'h0) begin
          M_seg_values = 32'h06111111;
          M_store_status_d = {2'h0, M_store_alufn_q};
          M_store_temp_d = 16'h0000;
        end
        if (M_case_state_q == 1'h1) begin
          M_seg_values = 32'h1111110b;
          M_store_status_d = 6'h00;
          M_store_temp_d = M_store_a_q;
        end
        if (M_case_state_q == 2'h2) begin
          M_seg_values = 32'h11111108;
          M_store_temp_d = M_store_b_q;
        end
        if (M_case_state_q == 2'h3) begin
          M_store_status_d = {5'h00, M_store_z_q, M_store_v_q, M_store_n_q};
          M_store_temp_d = alu[0+15-:16];
          if (M_store_correct_q == alu[0+15-:16]) begin
            M_seg_values = 32'h0a0b0c0c;
          end else begin
            M_seg_values = 32'h0d0b0e0f;
          end
        end
        if (M_case_state_q == 3'h4) begin
          M_store_a_d = 16'h0000;
          M_store_b_d = 16'h0000;
          M_store_alufn_d = 6'h00;
          M_store_status_d = 8'h00;
          M_store_temp_d = 16'h0000;
          M_store_z_d = 1'h0;
          M_store_v_d = 1'h0;
          M_store_n_d = 1'h0;
          M_case_state_d = 1'h0;
          M_state_d = TESTXOR_state;
        end
        io_led[16+7-:8] = M_store_status_q;
        io_led[0+15-:16] = M_store_temp_q;
        if (io_dip[23+0-:1]) begin
          M_state_d = MANUAL_state;
        end
        M_counter_d = M_counter_q + 1'h1;
        if (io_button[3+0-:1] | M_counter_q[16+0-:1] == 1'h1) begin
          M_case_state_d = M_case_state_q + 1'h1;
          M_counter_d = 1'h0;
        end
      end
      TESTXOR_state: begin
        M_store_alufn_d = 6'h16;
        M_store_a_d = 16'h6957;
        M_store_b_d = 16'hac08;
        M_store_correct_d = 16'hc55f;
        M_alumod_alufn = M_store_alufn_q;
        M_alumod_a = M_store_a_q;
        M_alumod_b = M_store_b_q;
        alu = M_alumod_result;
        M_store_z_d = M_alumod_z;
        M_store_v_d = M_alumod_v;
        M_store_n_d = M_alumod_n;
        if (M_case_state_q == 1'h0) begin
          M_seg_values = 32'h07111111;
          M_store_status_d = {2'h0, M_store_alufn_q};
          M_store_temp_d = 16'h0000;
        end
        if (M_case_state_q == 1'h1) begin
          M_seg_values = 32'h1111110b;
          M_store_status_d = 6'h00;
          M_store_temp_d = M_store_a_q;
        end
        if (M_case_state_q == 2'h2) begin
          M_seg_values = 32'h11111108;
          M_store_temp_d = M_store_b_q;
        end
        if (M_case_state_q == 2'h3) begin
          M_store_status_d = {5'h00, M_store_z_q, M_store_v_q, M_store_n_q};
          M_store_temp_d = alu[0+15-:16];
          if (M_store_correct_q == alu[0+15-:16]) begin
            M_seg_values = 32'h0a0b0c0c;
          end else begin
            M_seg_values = 32'h0d0b0e0f;
          end
        end
        if (M_case_state_q == 3'h4) begin
          M_store_a_d = 16'h0000;
          M_store_b_d = 16'h0000;
          M_store_alufn_d = 6'h00;
          M_store_status_d = 8'h00;
          M_store_temp_d = 16'h0000;
          M_store_z_d = 1'h0;
          M_store_v_d = 1'h0;
          M_store_n_d = 1'h0;
          M_case_state_d = 1'h0;
          M_state_d = TESTA_state;
        end
        io_led[16+7-:8] = M_store_status_q;
        io_led[0+15-:16] = M_store_temp_q;
        if (io_dip[23+0-:1]) begin
          M_state_d = MANUAL_state;
        end
        M_counter_d = M_counter_q + 1'h1;
        if (io_button[3+0-:1] | M_counter_q[16+0-:1] == 1'h1) begin
          M_case_state_d = M_case_state_q + 1'h1;
          M_counter_d = 1'h0;
        end
      end
      TESTA_state: begin
        M_store_alufn_d = 6'h1a;
        M_store_a_d = 16'h000c;
        M_store_b_d = 16'h0002;
        M_store_correct_d = 16'h000c;
        M_alumod_alufn = M_store_alufn_q;
        M_alumod_a = M_store_a_q;
        M_alumod_b = M_store_b_q;
        alu = M_alumod_result;
        M_store_z_d = M_alumod_z;
        M_store_v_d = M_alumod_v;
        M_store_n_d = M_alumod_n;
        if (M_case_state_q == 1'h0) begin
          M_seg_values = 32'h08111111;
          M_store_status_d = {2'h0, M_store_alufn_q};
          M_store_temp_d = 16'h0000;
        end
        if (M_case_state_q == 1'h1) begin
          M_seg_values = 32'h1111110b;
          M_store_status_d = 6'h00;
          M_store_temp_d = M_store_a_q;
        end
        if (M_case_state_q == 2'h2) begin
          M_seg_values = 32'h11111108;
          M_store_temp_d = M_store_b_q;
        end
        if (M_case_state_q == 2'h3) begin
          M_store_status_d = {5'h00, M_store_z_q, M_store_v_q, M_store_n_q};
          M_store_temp_d = alu[0+15-:16];
          if (M_store_correct_q == alu[0+15-:16]) begin
            M_seg_values = 32'h0a0b0c0c;
          end else begin
            M_seg_values = 32'h0d0b0e0f;
          end
        end
        if (M_case_state_q == 3'h4) begin
          M_store_a_d = 16'h0000;
          M_store_b_d = 16'h0000;
          M_store_alufn_d = 6'h00;
          M_store_status_d = 8'h00;
          M_store_temp_d = 16'h0000;
          M_store_z_d = 1'h0;
          M_store_v_d = 1'h0;
          M_store_n_d = 1'h0;
          M_case_state_d = 1'h0;
          M_state_d = TESTSHL_state;
        end
        io_led[16+7-:8] = M_store_status_q;
        io_led[0+15-:16] = M_store_temp_q;
        if (io_dip[23+0-:1]) begin
          M_state_d = MANUAL_state;
        end
        M_counter_d = M_counter_q + 1'h1;
        if (io_button[3+0-:1] | M_counter_q[16+0-:1] == 1'h1) begin
          M_case_state_d = M_case_state_q + 1'h1;
          M_counter_d = 1'h0;
        end
      end
      TESTSHL_state: begin
        M_store_alufn_d = 6'h20;
        M_store_a_d = 16'ha7ff;
        M_store_b_d = 16'h0001;
        M_store_correct_d = 16'h4ffe;
        M_alumod_alufn = M_store_alufn_q;
        M_alumod_a = M_store_a_q;
        M_alumod_b = M_store_b_q;
        alu = M_alumod_result;
        M_store_z_d = M_alumod_z;
        M_store_v_d = M_alumod_v;
        M_store_n_d = M_alumod_n;
        if (M_case_state_q == 1'h0) begin
          M_seg_values = 32'h09111111;
          M_store_status_d = {2'h0, M_store_alufn_q};
          M_store_temp_d = 16'h0000;
        end
        if (M_case_state_q == 1'h1) begin
          M_seg_values = 32'h1111110b;
          M_store_status_d = 6'h00;
          M_store_temp_d = M_store_a_q;
        end
        if (M_case_state_q == 2'h2) begin
          M_seg_values = 32'h11111108;
          M_store_temp_d = M_store_b_q;
        end
        if (M_case_state_q == 2'h3) begin
          M_store_status_d = {5'h00, M_store_z_q, M_store_v_q, M_store_n_q};
          M_store_temp_d = alu[0+15-:16];
          if (M_store_correct_q == alu[0+15-:16]) begin
            M_seg_values = 32'h0a0b0c0c;
          end else begin
            M_seg_values = 32'h0d0b0e0f;
          end
        end
        if (M_case_state_q == 3'h4) begin
          M_store_a_d = 16'h0000;
          M_store_b_d = 16'h0000;
          M_store_alufn_d = 6'h00;
          M_store_status_d = 8'h00;
          M_store_temp_d = 16'h0000;
          M_store_z_d = 1'h0;
          M_store_v_d = 1'h0;
          M_store_n_d = 1'h0;
          M_case_state_d = 1'h0;
          M_state_d = TESTSHR_state;
        end
        io_led[16+7-:8] = M_store_status_q;
        io_led[0+15-:16] = M_store_temp_q;
        if (io_dip[23+0-:1]) begin
          M_state_d = MANUAL_state;
        end
        M_counter_d = M_counter_q + 1'h1;
        if (io_button[3+0-:1] | M_counter_q[16+0-:1] == 1'h1) begin
          M_case_state_d = M_case_state_q + 1'h1;
          M_counter_d = 1'h0;
        end
      end
      TESTSHR_state: begin
        M_store_alufn_d = 6'h21;
        M_store_a_d = 16'ha7ff;
        M_store_b_d = 16'h0001;
        M_store_correct_d = 16'h53ff;
        M_alumod_alufn = M_store_alufn_q;
        M_alumod_a = M_store_a_q;
        M_alumod_b = M_store_b_q;
        alu = M_alumod_result;
        M_store_z_d = M_alumod_z;
        M_store_v_d = M_alumod_v;
        M_store_n_d = M_alumod_n;
        if (M_case_state_q == 1'h0) begin
          M_seg_values = 32'h01001111;
          M_store_status_d = {2'h0, M_store_alufn_q};
          M_store_temp_d = 16'h0000;
        end
        if (M_case_state_q == 1'h1) begin
          M_seg_values = 32'h1111110b;
          M_store_status_d = 6'h00;
          M_store_temp_d = M_store_a_q;
        end
        if (M_case_state_q == 2'h2) begin
          M_seg_values = 32'h11111108;
          M_store_temp_d = M_store_b_q;
        end
        if (M_case_state_q == 2'h3) begin
          M_store_status_d = {5'h00, M_store_z_q, M_store_v_q, M_store_n_q};
          M_store_temp_d = alu[0+15-:16];
          if (M_store_correct_q == alu[0+15-:16]) begin
            M_seg_values = 32'h0a0b0c0c;
          end else begin
            M_seg_values = 32'h0d0b0e0f;
          end
        end
        if (M_case_state_q == 3'h4) begin
          M_store_a_d = 16'h0000;
          M_store_b_d = 16'h0000;
          M_store_alufn_d = 6'h00;
          M_store_status_d = 8'h00;
          M_store_temp_d = 16'h0000;
          M_store_z_d = 1'h0;
          M_store_v_d = 1'h0;
          M_store_n_d = 1'h0;
          M_case_state_d = 1'h0;
          M_state_d = TESTSRA_state;
        end
        io_led[16+7-:8] = M_store_status_q;
        io_led[0+15-:16] = M_store_temp_q;
        if (io_dip[23+0-:1]) begin
          M_state_d = MANUAL_state;
        end
        M_counter_d = M_counter_q + 1'h1;
        if (io_button[3+0-:1] | M_counter_q[16+0-:1] == 1'h1) begin
          M_case_state_d = M_case_state_q + 1'h1;
          M_counter_d = 1'h0;
        end
      end
      TESTSRA_state: begin
        M_store_alufn_d = 6'h23;
        M_store_a_d = 16'ha7ff;
        M_store_b_d = 16'h0001;
        M_store_correct_d = 16'hd3ff;
        M_alumod_alufn = M_store_alufn_q;
        M_alumod_a = M_store_a_q;
        M_alumod_b = M_store_b_q;
        alu = M_alumod_result;
        M_store_z_d = M_alumod_z;
        M_store_v_d = M_alumod_v;
        M_store_n_d = M_alumod_n;
        if (M_case_state_q == 1'h0) begin
          M_seg_values = 32'h01011111;
          M_store_status_d = {2'h0, M_store_alufn_q};
          M_store_temp_d = 16'h0000;
        end
        if (M_case_state_q == 1'h1) begin
          M_seg_values = 32'h1111110b;
          M_store_status_d = 6'h00;
          M_store_temp_d = M_store_a_q;
        end
        if (M_case_state_q == 2'h2) begin
          M_seg_values = 32'h11111108;
          M_store_temp_d = M_store_b_q;
        end
        if (M_case_state_q == 2'h3) begin
          M_store_status_d = {5'h00, M_store_z_q, M_store_v_q, M_store_n_q};
          M_store_temp_d = alu[0+15-:16];
          if (M_store_correct_q == alu[0+15-:16]) begin
            M_seg_values = 32'h0a0b0c0c;
          end else begin
            M_seg_values = 32'h0d0b0e0f;
          end
        end
        if (M_case_state_q == 3'h4) begin
          M_store_a_d = 16'h0000;
          M_store_b_d = 16'h0000;
          M_store_alufn_d = 6'h00;
          M_store_status_d = 8'h00;
          M_store_temp_d = 16'h0000;
          M_store_z_d = 1'h0;
          M_store_v_d = 1'h0;
          M_store_n_d = 1'h0;
          M_case_state_d = 1'h0;
          M_state_d = TESTCMPEQ_state;
        end
        io_led[16+7-:8] = M_store_status_q;
        io_led[0+15-:16] = M_store_temp_q;
        if (io_dip[23+0-:1]) begin
          M_state_d = MANUAL_state;
        end
        M_counter_d = M_counter_q + 1'h1;
        if (io_button[3+0-:1] | M_counter_q[16+0-:1] == 1'h1) begin
          M_case_state_d = M_case_state_q + 1'h1;
          M_counter_d = 1'h0;
        end
      end
      TESTCMPEQ_state: begin
        M_store_alufn_d = 6'h33;
        M_store_a_d = 16'h000c;
        M_store_b_d = 16'h000c;
        M_store_correct_d = 16'h0001;
        M_alumod_alufn = M_store_alufn_q;
        M_alumod_a = M_store_a_q;
        M_alumod_b = M_store_b_q;
        alu = M_alumod_result;
        M_store_z_d = M_alumod_z;
        M_store_v_d = M_alumod_v;
        M_store_n_d = M_alumod_n;
        if (M_case_state_q == 1'h0) begin
          M_seg_values = 32'h01021111;
          M_store_status_d = {2'h0, M_store_alufn_q};
          M_store_temp_d = 16'h0000;
        end
        if (M_case_state_q == 1'h1) begin
          M_seg_values = 32'h1111110b;
          M_store_status_d = 6'h00;
          M_store_temp_d = M_store_a_q;
        end
        if (M_case_state_q == 2'h2) begin
          M_seg_values = 32'h11111108;
          M_store_temp_d = M_store_b_q;
        end
        if (M_case_state_q == 2'h3) begin
          M_store_status_d = {5'h00, M_store_z_q, M_store_v_q, M_store_n_q};
          M_store_temp_d = alu[0+15-:16];
          if (M_store_correct_q == alu[0+15-:16]) begin
            M_seg_values = 32'h0a0b0c0c;
          end else begin
            M_seg_values = 32'h0d0b0e0f;
          end
        end
        if (M_case_state_q == 3'h4) begin
          M_store_a_d = 16'h0000;
          M_store_b_d = 16'h0000;
          M_store_alufn_d = 6'h00;
          M_store_status_d = 8'h00;
          M_store_temp_d = 16'h0000;
          M_store_z_d = 1'h0;
          M_store_v_d = 1'h0;
          M_store_n_d = 1'h0;
          M_case_state_d = 1'h0;
          M_state_d = TESTCMPLT_state;
        end
        io_led[16+7-:8] = M_store_status_q;
        io_led[0+15-:16] = M_store_temp_q;
        if (io_dip[23+0-:1]) begin
          M_state_d = MANUAL_state;
        end
        M_counter_d = M_counter_q + 1'h1;
        if (io_button[3+0-:1] | M_counter_q[16+0-:1] == 1'h1) begin
          M_case_state_d = M_case_state_q + 1'h1;
          M_counter_d = 1'h0;
        end
      end
      TESTCMPLT_state: begin
        M_store_alufn_d = 6'h35;
        M_store_a_d = 16'h0002;
        M_store_b_d = 16'h000c;
        M_store_correct_d = 16'h0001;
        M_alumod_alufn = M_store_alufn_q;
        M_alumod_a = M_store_a_q;
        M_alumod_b = M_store_b_q;
        alu = M_alumod_result;
        M_store_z_d = M_alumod_z;
        M_store_v_d = M_alumod_v;
        M_store_n_d = M_alumod_n;
        if (M_case_state_q == 1'h0) begin
          M_seg_values = 32'h01031111;
          M_store_status_d = {2'h0, M_store_alufn_q};
          M_store_temp_d = 16'h0000;
        end
        if (M_case_state_q == 1'h1) begin
          M_seg_values = 32'h1111110b;
          M_store_status_d = 6'h00;
          M_store_temp_d = M_store_a_q;
        end
        if (M_case_state_q == 2'h2) begin
          M_seg_values = 32'h11111108;
          M_store_temp_d = M_store_b_q;
        end
        if (M_case_state_q == 2'h3) begin
          M_store_status_d = {5'h00, M_store_z_q, M_store_v_q, M_store_n_q};
          M_store_temp_d = alu[0+15-:16];
          if (M_store_correct_q == alu[0+15-:16]) begin
            M_seg_values = 32'h0a0b0c0c;
          end else begin
            M_seg_values = 32'h0d0b0e0f;
          end
        end
        if (M_case_state_q == 3'h4) begin
          M_store_a_d = 16'h0000;
          M_store_b_d = 16'h0000;
          M_store_alufn_d = 6'h00;
          M_store_status_d = 8'h00;
          M_store_temp_d = 16'h0000;
          M_store_z_d = 1'h0;
          M_store_v_d = 1'h0;
          M_store_n_d = 1'h0;
          M_case_state_d = 1'h0;
          M_state_d = TESTCMPLE_state;
        end
        io_led[16+7-:8] = M_store_status_q;
        io_led[0+15-:16] = M_store_temp_q;
        if (io_dip[23+0-:1]) begin
          M_state_d = MANUAL_state;
        end
        M_counter_d = M_counter_q + 1'h1;
        if (io_button[3+0-:1] | M_counter_q[16+0-:1] == 1'h1) begin
          M_case_state_d = M_case_state_q + 1'h1;
          M_counter_d = 1'h0;
        end
      end
      TESTCMPLE_state: begin
        M_store_alufn_d = 6'h37;
        M_store_a_d = 16'h000c;
        M_store_b_d = 16'h000c;
        M_store_correct_d = 16'h0001;
        M_alumod_alufn = M_store_alufn_q;
        M_alumod_a = M_store_a_q;
        M_alumod_b = M_store_b_q;
        alu = M_alumod_result;
        M_store_z_d = M_alumod_z;
        M_store_v_d = M_alumod_v;
        M_store_n_d = M_alumod_n;
        if (M_case_state_q == 1'h0) begin
          M_seg_values = 32'h01041111;
          M_store_status_d = {2'h0, M_store_alufn_q};
          M_store_temp_d = 16'h0000;
        end
        if (M_case_state_q == 1'h1) begin
          M_seg_values = 32'h1111110b;
          M_store_status_d = 6'h00;
          M_store_temp_d = M_store_a_q;
        end
        if (M_case_state_q == 2'h2) begin
          M_seg_values = 32'h11111108;
          M_store_temp_d = M_store_b_q;
        end
        if (M_case_state_q == 2'h3) begin
          M_store_status_d = {5'h00, M_store_z_q, M_store_v_q, M_store_n_q};
          M_store_temp_d = alu[0+15-:16];
          if (M_store_correct_q == alu[0+15-:16]) begin
            M_seg_values = 32'h0a0b0c0c;
          end else begin
            M_seg_values = 32'h0d0b0e0f;
          end
        end
        if (M_case_state_q == 3'h4) begin
          M_store_a_d = 16'h0000;
          M_store_b_d = 16'h0000;
          M_store_alufn_d = 6'h00;
          M_store_status_d = 8'h00;
          M_store_temp_d = 16'h0000;
          M_store_z_d = 1'h0;
          M_store_v_d = 1'h0;
          M_store_n_d = 1'h0;
          M_case_state_d = 1'h0;
          M_state_d = TESTCMPLE2_state;
        end
        io_led[16+7-:8] = M_store_status_q;
        io_led[0+15-:16] = M_store_temp_q;
        if (io_dip[23+0-:1]) begin
          M_state_d = MANUAL_state;
        end
        M_counter_d = M_counter_q + 1'h1;
        if (io_button[3+0-:1] | M_counter_q[16+0-:1] == 1'h1) begin
          M_case_state_d = M_case_state_q + 1'h1;
          M_counter_d = 1'h0;
        end
      end
      TESTCMPLE2_state: begin
        M_store_alufn_d = 6'h37;
        M_store_a_d = 16'h0002;
        M_store_b_d = 16'h000c;
        M_store_correct_d = 16'h0001;
        M_alumod_alufn = M_store_alufn_q;
        M_alumod_a = M_store_a_q;
        M_alumod_b = M_store_b_q;
        alu = M_alumod_result;
        M_store_z_d = M_alumod_z;
        M_store_v_d = M_alumod_v;
        M_store_n_d = M_alumod_n;
        if (M_case_state_q == 1'h0) begin
          M_seg_values = 32'h01051111;
          M_store_status_d = {2'h0, M_store_alufn_q};
          M_store_temp_d = 16'h0000;
        end
        if (M_case_state_q == 1'h1) begin
          M_seg_values = 32'h1111110b;
          M_store_status_d = 6'h00;
          M_store_temp_d = M_store_a_q;
        end
        if (M_case_state_q == 2'h2) begin
          M_seg_values = 32'h11111108;
          M_store_temp_d = M_store_b_q;
        end
        if (M_case_state_q == 2'h3) begin
          M_store_status_d = {5'h00, M_store_z_q, M_store_v_q, M_store_n_q};
          M_store_temp_d = alu[0+15-:16];
          if (M_store_correct_q == alu[0+15-:16]) begin
            M_seg_values = 32'h0a0b0c0c;
          end else begin
            M_seg_values = 32'h0d0b0e0f;
          end
        end
        if (M_case_state_q == 3'h4) begin
          M_store_a_d = 16'h0000;
          M_store_b_d = 16'h0000;
          M_store_alufn_d = 6'h00;
          M_store_status_d = 8'h00;
          M_store_temp_d = 16'h0000;
          M_store_z_d = 1'h0;
          M_store_v_d = 1'h0;
          M_store_n_d = 1'h0;
          M_case_state_d = 1'h0;
          M_state_d = MANUAL_state;
        end
        io_led[16+7-:8] = M_store_status_q;
        io_led[0+15-:16] = M_store_temp_q;
        if (io_dip[23+0-:1]) begin
          M_state_d = MANUAL_state;
        end
        M_counter_d = M_counter_q + 1'h1;
        if (io_button[3+0-:1] | M_counter_q[16+0-:1] == 1'h1) begin
          M_case_state_d = M_case_state_q + 1'h1;
          M_counter_d = 1'h0;
        end
      end
      default: begin
        M_seg_values = 32'h0d0d0d0d;
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_store_a_q <= 1'h0;
      M_store_b_q <= 1'h0;
      M_store_alufn_q <= 1'h0;
      M_store_temp_q <= 1'h0;
      M_store_z_q <= 1'h0;
      M_store_v_q <= 1'h0;
      M_store_n_q <= 1'h0;
      M_store_correct_q <= 1'h0;
      M_store_status_q <= 1'h0;
      M_counter_q <= 1'h0;
      M_case_state_q <= 1'h0;
      M_state_q <= 1'h0;
    end else begin
      M_store_a_q <= M_store_a_d;
      M_store_b_q <= M_store_b_d;
      M_store_alufn_q <= M_store_alufn_d;
      M_store_temp_q <= M_store_temp_d;
      M_store_z_q <= M_store_z_d;
      M_store_v_q <= M_store_v_d;
      M_store_n_q <= M_store_n_d;
      M_store_correct_q <= M_store_correct_d;
      M_store_status_q <= M_store_status_d;
      M_counter_q <= M_counter_d;
      M_case_state_q <= M_case_state_d;
      M_state_q <= M_state_d;
    end
  end
  
endmodule
