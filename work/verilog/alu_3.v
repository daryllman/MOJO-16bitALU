/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module alu_3 (
    input [15:0] a,
    input [15:0] b,
    input [5:0] alufn,
    output reg [15:0] result,
    output reg z,
    output reg v,
    output reg n
  );
  
  
  
  wire [16-1:0] M_adder_res;
  wire [1-1:0] M_adder_z;
  wire [1-1:0] M_adder_v;
  wire [1-1:0] M_adder_n;
  reg [16-1:0] M_adder_a;
  reg [16-1:0] M_adder_b;
  reg [2-1:0] M_adder_alufnadder;
  adderFunction_7 adder (
    .a(M_adder_a),
    .b(M_adder_b),
    .alufnadder(M_adder_alufnadder),
    .res(M_adder_res),
    .z(M_adder_z),
    .v(M_adder_v),
    .n(M_adder_n)
  );
  
  wire [16-1:0] M_bool_res;
  reg [16-1:0] M_bool_a;
  reg [16-1:0] M_bool_b;
  reg [4-1:0] M_bool_alufnbooler;
  boolFunction_8 bool (
    .a(M_bool_a),
    .b(M_bool_b),
    .alufnbooler(M_bool_alufnbooler),
    .res(M_bool_res)
  );
  
  wire [16-1:0] M_cmp_res;
  reg [1-1:0] M_cmp_z;
  reg [1-1:0] M_cmp_v;
  reg [1-1:0] M_cmp_n;
  reg [2-1:0] M_cmp_alufncmper;
  cmpFunction_9 cmp (
    .z(M_cmp_z),
    .v(M_cmp_v),
    .n(M_cmp_n),
    .alufncmper(M_cmp_alufncmper),
    .res(M_cmp_res)
  );
  
  wire [16-1:0] M_shifter_res;
  reg [16-1:0] M_shifter_a;
  reg [16-1:0] M_shifter_b;
  reg [2-1:0] M_shifter_alufnshifter;
  shifterFunction_10 shifter (
    .a(M_shifter_a),
    .b(M_shifter_b),
    .alufnshifter(M_shifter_alufnshifter),
    .res(M_shifter_res)
  );
  
  always @* begin
    M_adder_a = a;
    M_adder_b = b;
    M_adder_alufnadder = alufn[0+1-:2];
    z = M_adder_z;
    v = M_adder_v;
    n = M_adder_n;
    M_cmp_z = M_adder_z;
    M_cmp_v = M_adder_v;
    M_cmp_n = M_adder_n;
    M_cmp_alufncmper = alufn[1+1-:2];
    M_bool_a = a;
    M_bool_b = b;
    M_bool_alufnbooler = alufn[0+3-:4];
    M_shifter_a = a;
    M_shifter_b = b;
    M_shifter_alufnshifter = alufn[0+1-:2];
    
    case (alufn[4+1-:2])
      2'h0: begin
        result = M_adder_res;
      end
      2'h1: begin
        result = M_bool_res;
      end
      2'h2: begin
        result = M_shifter_res;
      end
      2'h3: begin
        result = M_cmp_res;
      end
      default: begin
        result = 16'h0000;
      end
    endcase
  end
endmodule
